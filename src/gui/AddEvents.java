/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.aman.gui;

import com.aman.dao.EventDao;
import com.aman.pojo.Events;
import com.aman.pojo.User;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author vivek
 */
public class AddEvents extends javax.swing.JFrame {

    /**
     * Creates new form AddEvents
     */
    User user;
    Events event;
    String filename;
    boolean wrongevent;
    public AddEvents() {
        this.wrongevent = false;
        initComponents();
        this.setLocationRelativeTo(null);
    }
    public AddEvents(User user)
    {
        this();
        this.wrongevent = false;
        this.user=user;
    }
    public AddEvents(Events evt,User user)
    {
        this();
        this.wrongevent = false;
        this.event=evt;
        this.user=user;
        setFields(filename);
    }
    public AddEvents(Events evt,String filename,User user)
    {
        this();
        this.wrongevent = false;
        this.event=evt;
        this.user=user;
        this.filename=filename;
        setFields(filename);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Country = new javax.swing.JLabel();
        State = new javax.swing.JLabel();
        City = new javax.swing.JLabel();
        EventName = new javax.swing.JLabel();
        OpeningTime = new javax.swing.JLabel();
        AvailableSeat = new javax.swing.JLabel();
        ClosingTime = new javax.swing.JLabel();
        TotalSeat = new javax.swing.JLabel();
        CostPerSeat = new javax.swing.JLabel();
        Venue = new javax.swing.JLabel();
        countrytf = new javax.swing.JTextField();
        statetf = new javax.swing.JTextField();
        eventtf = new javax.swing.JTextField();
        openingtimetf = new javax.swing.JTextField();
        totalseattf = new javax.swing.JTextField();
        closingtimetf = new javax.swing.JTextField();
        costperseattf = new javax.swing.JTextField();
        availableseattf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        venueta = new javax.swing.JTextArea();
        Browsebutton = new javax.swing.JButton();
        AddEventImage = new javax.swing.JLabel();
        Logoutlabel = new javax.swing.JLabel();
        AddEventbutton = new javax.swing.JButton();
        Addeventlabel = new javax.swing.JLabel();
        image = new javax.swing.JLabel();
        jCities1 = new javax.swing.JComboBox();
        home = new javax.swing.JButton();
        wrongname = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Country.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Country.setForeground(new java.awt.Color(255, 0, 0));
        Country.setText("Country");

        State.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        State.setForeground(new java.awt.Color(255, 0, 0));
        State.setText("State");

        City.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        City.setForeground(new java.awt.Color(255, 0, 0));
        City.setText("City");

        EventName.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        EventName.setForeground(new java.awt.Color(255, 0, 0));
        EventName.setText("Event Name");

        OpeningTime.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        OpeningTime.setForeground(new java.awt.Color(255, 0, 0));
        OpeningTime.setText("Opening Time");

        AvailableSeat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        AvailableSeat.setForeground(new java.awt.Color(255, 0, 0));
        AvailableSeat.setText("Available Seat");

        ClosingTime.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ClosingTime.setForeground(new java.awt.Color(255, 0, 0));
        ClosingTime.setText("Closing Time");

        TotalSeat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        TotalSeat.setForeground(new java.awt.Color(255, 0, 0));
        TotalSeat.setText("Total Seat");

        CostPerSeat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        CostPerSeat.setForeground(new java.awt.Color(255, 0, 0));
        CostPerSeat.setText("Cost Per Seat");

        Venue.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Venue.setForeground(new java.awt.Color(255, 0, 0));
        Venue.setText("Venue");

        statetf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statetfActionPerformed(evt);
            }
        });

        eventtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eventtfKeyReleased(evt);
            }
        });

        totalseattf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalseattfActionPerformed(evt);
            }
        });

        venueta.setColumns(20);
        venueta.setRows(5);
        jScrollPane1.setViewportView(venueta);

        Browsebutton.setBackground(new java.awt.Color(51, 51, 255));
        Browsebutton.setText("Browse");
        Browsebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowsebuttonActionPerformed(evt);
            }
        });

        AddEventImage.setText("Add Event Image");

        Logoutlabel.setBackground(new java.awt.Color(0, 0, 0));
        Logoutlabel.setForeground(new java.awt.Color(255, 0, 0));
        Logoutlabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Logoutlabel.setText("Logout");
        Logoutlabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Logoutlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogoutlabelMouseClicked(evt);
            }
        });

        AddEventbutton.setBackground(new java.awt.Color(51, 255, 51));
        AddEventbutton.setText("Add Event");
        AddEventbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEventbuttonActionPerformed(evt);
            }
        });

        Addeventlabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Addeventlabel.setText("Add New Event");

        jCities1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Adilabad", "Agra", "Ahmedabad", "Ahmednagar", "Aizawl", "Ajitgarh (Mohali)", "Ajmer", "Akola", "Alappuzha", "Aligarh", "Alirajpur", "Allahabad", "Almora", "Alwar", "Ambala", "Ambedkar Nagar", "Amravati", "Amreli district", "Amritsar", "Anand", "Anantapur", "Anantnag", "Angul", "Anjaw", "Anuppur", "Araria", "Ariyalur", "Arwal", "Ashok Nagar", "Auraiya", "Aurangabad", "Aurangabad", "Azamgarh", "Badgam", "Bagalkot", "Bageshwar", "Bagpat", "Bahraich", "Baksa", "Balaghat", "Balangir", "Balasore", "Ballia", "Balrampur", "Banaskantha", "Banda", "Bandipora", "Bangalore Rural", "Bangalore Urban", "Banka", "Bankura", "Banswara", "Barabanki", "Baramulla", "Baran", "Bardhaman", "Bareilly", "Bargarh (Baragarh)", "Barmer", "Barnala", "Barpeta", "Barwani", "Bastar", "Basti", "Bathinda", "Beed", "Begusarai", "Belgaum", "Bellary", "Betul", "Bhadrak", "Bhagalpur", "Bhandara", "Bharatpur", "Bharuch", "Bhavnagar", "Bhilwara", "Bhind", "Bhiwani", "Bhojpur", "Bhopal", "Bidar", "Bijapur", "Bijapur", "Bijnor", "Bikaner", "Bilaspur", "Bilaspur", "Birbhum", "Bishnupur", "Bokaro", "Bongaigaon", "Boudh (Bauda)", "Budaun", "Bulandshahr", "Buldhana", "Bundi", "Burhanpur", "Buxar", "Cachar", "Central Delhi", "Chamarajnagar", "Chamba", "Chamoli", "Champawat", "Champhai", "Chandauli", "Chandel", "Chandigarh", "Chandrapur", "Changlang", "Chatra", "Chennai", "Chhatarpur", "Chhatrapati Shahuji Maharaj Nagar", "Chhindwara", "Chikkaballapur", "Chikkamagaluru", "Chirang", "Chitradurga", "Chitrakoot", "Chittoor", "Chittorgarh", "Churachandpur", "Churu", "Coimbatore", "Cooch Behar", "Cuddalore", "Cuttack", "Dadra and Nagar Haveli", "Dahod", "Dakshin Dinajpur", "Dakshina Kannada", "Daman", "Damoh", "Dantewada", "Darbhanga", "Darjeeling", "Darrang", "Datia", "Dausa", "Davanagere", "Debagarh (Deogarh)", "Dehradun", "Deoghar", "Deoria", "Dewas", "Dhalai", "Dhamtari", "Dhanbad", "Dhar", "Dharmapuri", "Dharwad", "Dhemaji", "Dhenkanal", "Dholpur", "Dhubri", "Dhule", "Dibang Valley", "Dibrugarh", "Dima Hasao", "Dimapur", "Dindigul", "Dindori", "Diu", "Doda", "Dumka", "Dungapur", "Durg", "East Champaran", "East Delhi", "East Garo Hills", "East Khasi Hills", "East Siang", "East Sikkim", "East Singhbhum", "Eluru", "Ernakulam", "Erode", "Etah", "Etawah", "Faizabad", "Faridabad", "Faridkot", "Farrukhabad", "Fatehabad", "Fatehgarh Sahib", "Fatehpur", "Fazilka", "Firozabad", "Firozpur", "Gadag", "Gadchiroli", "Gajapati", "Ganderbal", "Gandhinagar", "Ganganagar", "Ganjam", "Garhwa", "Gautam Buddh Nagar", "Gaya", "Ghaziabad", "Ghazipur", "Giridih", "Goalpara", "Godda", "Golaghat", "Gonda", "Gondia", "Gopalganj", "Gorakhpur", "Gulbarga", "Gumla", "Guna", "Guntur", "Gurdaspur", "Gurgaon", "Gwalior", "Hailakandi", "Hamirpur", "Hamirpur", "Hanumangarh", "Harda", "Hardoi", "Haridwar", "Hassan", "Haveri district", "Hazaribag", "Hingoli", "Hissar", "Hooghly", "Hoshangabad", "Hoshiarpur", "Howrah", "Hyderabad", "Hyderabad", "Idukki", "Imphal East", "Imphal West", "Indore", "Jabalpur", "Jagatsinghpur", "Jaintia Hills", "Jaipur", "Jaisalmer", "Jajpur", "Jalandhar", "Jalaun", "Jalgaon", "Jalna", "Jalore", "Jalpaiguri", "Jammu", "Jamnagar", "Jamtara", "Jamui", "Janjgir-Champa", "Jashpur", "Jaunpur district", "Jehanabad", "Jhabua", "Jhajjar", "Jhalawar", "Jhansi", "Jharsuguda", "Jhunjhunu", "Jind", "Jodhpur", "Jorhat", "Junagadh", "Jyotiba Phule Nagar", "Kabirdham (formerly Kawardha)", "Kadapa", "Kaimur", "Kaithal", "Kakinada", "Kalahandi", "Kamrup", "Kamrup Metropolitan", "Kanchipuram", "Kandhamal", "Kangra", "Kanker", "Kannauj", "Kannur", "Kanpur", "Kanshi Ram Nagar", "Kanyakumari", "Kapurthala", "Karaikal", "Karauli", "Karbi Anglong", "Kargil", "Karimganj", "Karimnagar", "Karnal", "Karur", "Kasaragod", "Kathua", "Katihar", "Katni", "Kaushambi", "Kendrapara", "Kendujhar (Keonjhar)", "Khagaria", "Khammam", "Khandwa (East Nimar)", "Khargone (West Nimar)", "Kheda", "Khordha", "Khowai", "Khunti", "Kinnaur", "Kishanganj", "Kishtwar", "Kodagu", "Koderma", "Kohima", "Kokrajhar", "Kolar", "Kolasib", "Kolhapur", "Kolkata", "Kollam", "Koppal", "Koraput", "Korba", "Koriya", "Kota", "Kottayam", "Kozhikode", "Krishna", "Kulgam", "Kullu", "Kupwara", "Kurnool", "Kurukshetra", "Kurung Kumey", "Kushinagar", "Kutch", "Lahaul and Spiti", "Lakhimpur", "Lakhimpur Kheri", "Lakhisarai", "Lalitpur", "Latehar", "Latur", "Lawngtlai", "Leh", "Lohardaga", "Lohit", "Lower Dibang Valley", "Lower Subansiri", "Lucknow", "Ludhiana", "Lunglei", "Madhepura", "Madhubani", "Madurai", "Mahamaya Nagar", "Maharajganj", "Mahasamund", "Mahbubnagar", "Mahe", "Mahendragarh", "Mahoba", "Mainpuri", "Malappuram", "Maldah", "Malkangiri", "Mamit", "Mandi", "Mandla", "Mandsaur", "Mandya", "Mansa", "Marigaon", "Mathura", "Mau", "Mayurbhanj", "Medak", "Meerut", "Mehsana", "Mewat", "Mirzapur", "Moga", "Mokokchung", "Mon", "Moradabad", "Morena", "Mumbai City", "Mumbai suburban", "Munger", "Murshidabad", "Muzaffarnagar", "Muzaffarpur", "Mysore", "Nabarangpur", "Nadia", "Nagaon", "Nagapattinam", "Nagaur", "Nagpur", "Nainital", "Nalanda", "Nalbari", "Nalgonda", "Namakkal", "Nanded", "Nandurbar", "Narayanpur", "Narmada", "Narsinghpur", "Nashik", "Navsari", "Nawada", "Nawanshahr", "Nayagarh", "Neemuch", "Nellore", "New Delhi", "Nilgiris", "Nizamabad", "North 24 Parganas", "North Delhi", "North East Delhi", "North Goa", "North Sikkim", "North Tripura", "North West Delhi", "Nuapada", "Ongole", "Osmanabad", "Pakur", "Palakkad", "Palamu", "Pali", "Palwal", "Panchkula", "Panchmahal", "Panchsheel Nagar district (Hapur)", "Panipat", "Panna", "Papum Pare", "Parbhani", "Paschim Medinipur", "Patan", "Pathanamthitta", "Pathankot", "Patiala", "Patna", "Pauri Garhwal", "Perambalur", "Phek", "Pilibhit", "Pithoragarh", "Pondicherry", "Poonch", "Porbandar", "Pratapgarh", "Pratapgarh", "Pudukkottai", "Pulwama", "Pune", "Purba Medinipur", "Puri", "Purnia", "Purulia", "Raebareli", "Raichur", "Raigad", "Raigarh", "Raipur", "Raisen", "Rajauri", "Rajgarh", "Rajkot", "Rajnandgaon", "Rajsamand", "Ramabai Nagar (Kanpur Dehat)", "Ramanagara", "Ramanathapuram", "Ramban", "Ramgarh", "Rampur", "Ranchi", "Ratlam", "Ratnagiri", "Rayagada", "Reasi", "Rewa", "Rewari", "Ri Bhoi", "Rohtak", "Rohtas", "Rudraprayag", "Rupnagar", "Sabarkantha", "Sagar", "Saharanpur", "Saharsa", "Sahibganj", "Saiha", "Salem", "Samastipur", "Samba", "Sambalpur", "Sangli", "Sangrur", "Sant Kabir Nagar", "Sant Ravidas Nagar", "Saran", "Satara", "Satna", "Sawai Madhopur", "Sehore", "Senapati", "Seoni", "Seraikela Kharsawan", "Serchhip", "Shahdol", "Shahjahanpur", "Shajapur", "Shamli", "Sheikhpura", "Sheohar", "Sheopur", "Shimla", "Shimoga", "Shivpuri", "Shopian", "Shravasti", "Sibsagar", "Siddharthnagar", "Sidhi", "Sikar", "Simdega", "Sindhudurg", "Singrauli", "Sirmaur", "Sirohi", "Sirsa", "Sitamarhi", "Sitapur", "Sivaganga", "Siwan", "Solan", "Solapur", "Sonbhadra", "Sonipat", "Sonitpur", "South 24 Parganas", "South Delhi", "South Garo Hills", "South Goa", "South Sikkim", "South Tripura", "South West Delhi", "Sri Muktsar Sahib", "Srikakulam", "Srinagar", "Subarnapur (Sonepur)", "Sultanpur", "Sundergarh", "Supaul", "Surat", "Surendranagar", "Surguja", "Tamenglong", "Tarn Taran", "Tawang", "Tehri Garhwal", "Thane", "Thanjavur", "The Dangs", "Theni", "Thiruvananthapuram", "Thoothukudi", "Thoubal", "Thrissur", "Tikamgarh", "Tinsukia", "Tirap", "Tiruchirappalli", "Tirunelveli", "Tirupur", "Tiruvallur", "Tiruvannamalai", "Tiruvarur", "Tonk", "Tuensang", "Tumkur", "Udaipur", "Udalguri", "Udham Singh Nagar", "Udhampur", "Udupi", "Ujjain", "Ukhrul", "Umaria", "Una", "Unnao", "Upper Siang", "Upper Subansiri", "Uttar Dinajpur", "Uttara Kannada", "Uttarkashi", "Vadodara", "Vaishali", "Valsad", "Varanasi", "Vellore", "Vidisha", "Viluppuram", "Virudhunagar", "Visakhapatnam", "Vizianagaram", "Vyara", "Warangal", "Wardha", "Washim", "Wayanad", "West Champaran", "West Delhi", "West Garo Hills", "West Kameng", "West Khasi Hills", "West Siang", "West Sikkim", "West Singhbhum", "West Tripura", "Wokha", "Yadgir", "Yamuna Nagar", "Yanam", "Yavatmal", "ZunhebotoAdilabad" }));
        jCities1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 153)));

        home.setText("Home");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        wrongname.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        wrongname.setForeground(new java.awt.Color(255, 0, 0));
        wrongname.setText("*");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CostPerSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(costperseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AddEventbutton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(countrytf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(456, 456, 456)
                                .addComponent(Browsebutton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(440, 440, 440)
                                .addComponent(AddEventImage, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(home)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(187, 187, 187)
                                        .addComponent(Addeventlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(507, 507, 507)
                                        .addComponent(Logoutlabel))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AvailableSeat)
                                    .addComponent(Venue, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(EventName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(OpeningTime))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ClosingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(1, 1, 1)))
                                    .addComponent(TotalSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(openingtimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(availableseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(totalseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(closingtimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(State, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCities1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(statetf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(eventtf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wrongname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Addeventlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(home))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countrytf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Country, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statetf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(State, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Logoutlabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(AddEventImage, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Browsebutton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(City, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addComponent(jCities1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(OpeningTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(EventName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eventtf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wrongname))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(openingtimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closingtimetf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClosingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TotalSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AvailableSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(availableseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(image, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CostPerSeat, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(costperseattf, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddEventbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Venue, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowsebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowsebuttonActionPerformed
        // TODO add your handling code here:
        initialiseEvent();
        new BrowseFiles(event,user).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BrowsebuttonActionPerformed

    private void LogoutlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutlabelMouseClicked
        // TODO add your handling code here:
        int ans;
        ans = JOptionPane.showConfirmDialog(this,"Do you want to logout!","Logout",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
        if(ans==JOptionPane.OK_OPTION)
        {
            new Login().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_LogoutlabelMouseClicked

    private void AddEventbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEventbuttonActionPerformed
        // TODO add your handling code here:
        boolean check=validateFields();
        System.out.println(check);
        if(!check)
        {
            JOptionPane.showMessageDialog(this, "Please fill all the columns properly!","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        try
        {
            boolean flag=EventDao.addEvent(event,filename);
            if(!flag)
            {
                JOptionPane.showMessageDialog(this, "Sorry! Something went wrong!","Error",JOptionPane.ERROR_MESSAGE);
                return;
            }
            int ans=JOptionPane.showConfirmDialog(this, "Successfully added to the database\nDo you want to add more Events?","Success",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE);
            if(ans==JOptionPane.YES_OPTION)
            {
                new AddEvents(user).setVisible(true);
            }
            else
            {
                switch(user.getUsertype().toLowerCase())
                {
                    case "admin":
                        new AdminPage(user).setVisible(true);
                        this.dispose();
                        break;
                    case "user":
                        new UserPage(user).setVisible(true);
                        this.dispose();
                        break;
                    case "agent":
                        new AgentPage(user).setVisible(true);
                        this.dispose();
                        break;
                }
            }
            this.dispose();
        }
        catch(SQLException sqle)
        {
            JOptionPane.showMessageDialog(this,"Error while connection to the Database.\nPlease Try again!","Exception!",JOptionPane.ERROR_MESSAGE);
            sqle.printStackTrace();
        }
        catch(FileNotFoundException fnf)
	{
            System.out.println("Cannot open the file");
            System.out.println(fnf.getMessage());
	}
    }//GEN-LAST:event_AddEventbuttonActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        // TODO add your handling code here:
        if(user.getUsertype().equalsIgnoreCase("admin"))
        {
            new AdminPage(user).setVisible(true);
            this.dispose();
        }
        else
        {
            new AgentPage(user).setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_homeActionPerformed

    private void statetfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statetfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statetfActionPerformed

    private void totalseattfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalseattfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalseattfActionPerformed

    private void eventtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventtfKeyReleased
        // TODO add your handling code here:
        try
        {
            boolean checkuser=EventDao.checkEvent(eventtf.getText());
            wrongevent=false;
            if(checkuser)
            {
                wrongname.setVisible(true);
                wrongevent=true;
            }
            else
            {
                wrongname.setVisible(false);
            }
        }
        catch(SQLException sql)
        {
            JOptionPane.showMessageDialog(this, "Sorry Error while checking for uniqueness in event name!","Error",JOptionPane.ERROR_MESSAGE);
            System.out.println(sql);
            sql.printStackTrace();
        }
    }//GEN-LAST:event_eventtfKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEvents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddEventImage;
    private javax.swing.JButton AddEventbutton;
    private javax.swing.JLabel Addeventlabel;
    private javax.swing.JLabel AvailableSeat;
    private javax.swing.JButton Browsebutton;
    private javax.swing.JLabel City;
    private javax.swing.JLabel ClosingTime;
    private javax.swing.JLabel CostPerSeat;
    private javax.swing.JLabel Country;
    private javax.swing.JLabel EventName;
    private javax.swing.JLabel Logoutlabel;
    private javax.swing.JLabel OpeningTime;
    private javax.swing.JLabel State;
    private javax.swing.JLabel TotalSeat;
    private javax.swing.JLabel Venue;
    private javax.swing.JTextField availableseattf;
    private javax.swing.JTextField closingtimetf;
    private javax.swing.JTextField costperseattf;
    private javax.swing.JTextField countrytf;
    private javax.swing.JTextField eventtf;
    private javax.swing.JButton home;
    private javax.swing.JLabel image;
    private javax.swing.JComboBox jCities1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField openingtimetf;
    private javax.swing.JTextField statetf;
    private javax.swing.JTextField totalseattf;
    private javax.swing.JTextArea venueta;
    private javax.swing.JLabel wrongname;
    // End of variables declaration//GEN-END:variables

    private void initialiseEvent()
    {
        String evtname=eventtf.getText().trim();
        String country=countrytf.getText().trim();
        String state=statetf.getText().trim();
        String city=String.valueOf(jCities1.getSelectedItem()).trim();
        String otime=openingtimetf.getText().trim();
        String ctime=closingtimetf.getText().trim();
        String time="";
        if(!otime.isEmpty() && !ctime.isEmpty())
            time=otime+" - "+ctime;
        String aseat=availableseattf.getText().trim();
        String tseat=totalseattf.getText().trim();
        String cpseat=costperseattf.getText().trim();
        String venue=venueta.getText().trim();
        event=new Events();
        try
        {
        if(!evtname.isEmpty())
            event.setName(evtname);
        if(!country.isEmpty())
            event.setCountry(country);
        if(!state.isEmpty())
            event.setState(state);
        if(!city.isEmpty())
            event.setCity(city);
        if(!time.isEmpty())
            event.setTime(time);
        if(!aseat.isEmpty())
            event.setAvailableseat(Integer.parseInt(aseat));
        if(!tseat.isEmpty())
            event.setTotalseat(Integer.parseInt(tseat));
        if(!cpseat.isEmpty())
            event.setCostperseat(Double.parseDouble(cpseat));
        if(!venue.isEmpty())
            event.setVenue(venue);
        }
        catch(NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this, "please input numbers only in it available seat , total seat and cost per seat!","Error!",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
            ex.printStackTrace();
        }
    }
    private boolean validateFields() 
    {
        if(wrongevent)
        {
            JOptionPane.showMessageDialog(this, "Please enter a unique event name!","Error",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try
        {
            File f= new File(filename);
            event.setImgname(filename);
            Connection conn=DriverManager.getConnection("jdbc:oracle:thin:@//localhost:1521/xe","seatbooking","tnp");
            Blob b1 = conn.createBlob();
            b1.setBytes(1, new byte[(int)f.length()]);
            event.setImage(b1);
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(this, "Cannot connect to the database","Error!",JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            System.exit(0);
        }
        return !((event.getAvailableseat() == 0) || event.getCity().isEmpty() || (event.getCostperseat() == 0) || event.getCountry().isEmpty() || event.getImage() == null || event.getImgname().isEmpty() || event.getName().isEmpty() || event.getState().isEmpty() || event.getTime().isEmpty() || (event.getTotalseat() == 0) || event.getVenue().isEmpty());
        
    }
    private void setFields(String filename) 
    {
        countrytf.setText(event.getCountry());
        statetf.setText(event.getState());
        jCities1.setSelectedItem(event.getCity());
        eventtf.setText(event.getName());
        String time=event.getTime();
        String arr[]=new String[2];
        if(time!=null)
        {
            arr=time.split("-");
            openingtimetf.setText(arr[0].trim());
            closingtimetf.setText(arr[1].trim());
        }
        totalseattf.setText(String.valueOf(event.getTotalseat()));
        availableseattf.setText(String.valueOf(event.getAvailableseat()));
        costperseattf.setText(String.valueOf(event.getCostperseat()));
        venueta.setText(event.getVenue());
        ImageIcon icon = new ImageIcon(filename);
        if(icon != null){
            Image img = icon.getImage(); 
            Image newimg = img.getScaledInstance(image.getWidth(), image.getHeight(),  java.awt.Image.SCALE_SMOOTH);
            icon = new ImageIcon(newimg);
            image.setIcon(icon);
            image.setText(null);
        }
        else{
            image.setText("Image not found");
            image.setIcon(null);
        }
    }
}
